(define (get-sum fs f) ((find-field fs f) ["summary" "sum"]))

(define (evaluate-threshold ds-id pred-id label-id th)
  (let (fl (flatline "(let (label (f {{label-id}})"
                     "      pred-label (if (>= (f {{pred-id}}) {{th}}) 1 0))"
                     "  (list (if (= label pred-label 1) 1 0)"
                     "        (if (= label pred-label 0) 1 0)"
                     "        (if (and (= 0 label) (= 1 pred-label)) 1 0)"
                     "        (if (and (= 1 label) (= 0 pred-label)) 1 0)))")
        names ["tp" "tn" "fp" "fn"]
        params {"new_fields" [{"names" names "fields" fl}] "all_fields" false}
        id (wait (create-dataset ds-id params))
        fds (resource-fields id)
        res (reduce (lambda (r f) (assoc r f (get-sum fds f))) {} names))
    (delete id)
    (assoc res "threshold" th)))

(define (evaluate-thresholds dataset-id model-id label from to step)
  (let (bp-id (create-batchprediction model-id dataset-id
                                      {"output_dataset" true "all_fields" true})
        bp (fetch (wait bp-id))
        ds-id (bp "output_dataset_resource")
        ds (fetch (wait ds-id))
        pred-id (ds ["objective_field" "id"]))
    (loop (th from evs [])
      (if (> th to)
          evs
          (recur (+ th step)
                 (append evs (evaluate-threshold ds-id pred-id label th)))))))

(define evaluations (evaluate-thresholds dataset
                                         model
                                         label-field
                                         threshold-begin
                                         threshold-end
                                         threshold-step))
