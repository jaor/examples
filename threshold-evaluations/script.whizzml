(define (get-sum fs f) ((find-field fs f) ["summary" "sum"]))

(define (auc tp fn fp tn)
  (let (tp+fn (+ tp fn)
        tpr (if (positive? tp+fn) (/ tp tp+fn) 1)
        fp+tn (+ fp tn)
        fpr (if (positive? fp+tn) (/ fp fp+tn) 1)
        len-a (sqrt 2)
        len-b (sqrt (+ (* tpr tpr) (* fpr fpr)))
        len-c (sqrt (+ (* (- 1 tpr) (- 1 tpr)) (* (- 1 fpr) (- 1 fpr))))
        half-p (/ (+ len-a len-b len-c) 2)
        area (sqrt (* half-p
                      (- half-p len-a)
                      (- half-p len-b)
                      (- half-p len-c))))
    (cond (= tpr fpr) 0.5
          (> tpr fpr) (+ 0.5 area)
          (- 0.5 area))))

(define (accuracy tp fn fp tn)
  (let (p (+ tp tn fp fn)) (if (zero? p) 0 (/ (+ tp tn) p))))

(define (precision tp fp)
  (let (p (+ tp fp)) (if (zero? p) 0 (/ tp p))))

(define (recall tp fn)
  (let (p (+ tp fn)) (if (zero? p) 0 (/ tp p))))

(define (f-measure p r)
  (let (q (+ p r)) (if (zero? q) 0 (/ (* 2 p r) (+ p r)))))

(define (phi tp fn fp tn)
  (let (tpn (* tp tn)
        fpn (* fp fn))
    (if (or (zero? tpn) (zero? fpn))
        0
        (let (ds [(sqrt (+ tp fp)) (sqrt (+ tp fn))
                  (sqrt (+ tn fp)) (sqrt (+ tn fn))]
              a (reduce / tpn ds)
              b (reduce / fpn ds))
          (+ a b)))))

(define (evaluate-threshold ds-id pred-id label-id th)
  (let (fl (flatline "(let (label (f {{label-id}})"
                     "      pred-label (if (>= (f {{pred-id}}) {{th}}) 1 0))"
                     "  (list (if (= label pred-label 1) 1 0)"
                     "        (if (= label pred-label 0) 1 0)"
                     "        (if (and (= 0 label) (= 1 pred-label)) 1 0)"
                     "        (if (and (= 1 label) (= 0 pred-label)) 1 0)))")
        names ["tp" "fn" "fp" "tn"]
        params {"new_fields" [{"names" names "fields" fl}] "all_fields" false}
        id (wait (create-dataset ds-id params))
        fds (resource-fields id)
        [tp fn fp tn] (map (lambda (f) (get-sum fds f)) names)
        prec (precision tp fp)
        rec (recall tp fn))
    (when delete-datasets? (delete id))
    {"confusion-matrix" [[tp fn] [fp tn]]
     "auc" (auc tp fn fp tn)
     "accuracy" (accuracy tp fn fp tn)
     "precision" prec
     "recall" rec
     "f-measure" (f-measure prec rec)
     "phi" (phi tp fn fp fn)
     "threshold" th}))

(define (evaluate-thresholds dataset-id model-id label from to step)
  (when (< to from)
    (raise "Invalid threshold bounds (end greater than begin)"))
  (when (not (positive? step))
    (raise "Invalid threshold step: must be positive"))
  (let (p-label (str "predicted_" label)
        bp-id (create-batchprediction model-id dataset-id
                                      {"output_dataset" true
                                       "all_fields" true
                                       "prediction_name" p-label})
        ds-id ((fetch (wait bp-id)) "output_dataset_resource"))
    (loop (th from evs [])
      (if (> th to)
          evs
          (recur (+ th step)
                 (append evs (evaluate-threshold ds-id p-label label th)))))))

(define evaluations (evaluate-thresholds dataset
                                         model
                                         label-field
                                         threshold-begin
                                         threshold-end
                                         threshold-step))
